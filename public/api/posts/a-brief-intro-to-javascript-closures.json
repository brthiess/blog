{
    "title": "A Brief Intro to Javascript Closures",
    "content": "This is a bit of an older topic for me, but it is something that always confused me as a younger developer so I thought I'd take a deep dive into Javascript closures to learn more about them.  \r\n\r\n## So what are Javascript closures?\r\n\r\nTo put it simply, a javascript closure is a function with references to it's surrounding variables.  Basically a closure gives you access to the scope outside the function from within the function.  \r\n\r\nHere is a quick example:\r\n\r\n```\r\nfunction outer() {\r\n    let country = 'Mexico';\r\n    function showCountry() {\r\n        console.log(country);\r\n    }\r\n    showCountry(); \r\n}\r\nouter(); \/\/logs 'Mexico'\r\n```\r\n\r\nThe function `outer` creates a variable called `country` which is set to 'Mexico'.  `showCountry`, which is a closure, has access to its surrounding variables, so when `showCountry` is called, it is able to access the `country` variable which was set outside its scope.\r\n\r\nThis is a pretty trivial example but hopefully it gets the point across.\r\n\r\n## Why would I want to use closures?\r\n\r\nGood question!  One practical use case is to create private methods.  For example, let's say we wanted to create a bank account function which could add or remove money from an account.\r\n\r\n```\r\nlet createBankAccount = function() {\r\n    var balance = 0;\r\n    function updateBalance(amount) { \/\/Private method\r\n        if (balance + amount < 0){\r\n            throw 'Negative amount error';\r\n        }\r\n        balance += amount;\r\n    }\r\n\r\n    return {\r\n        addMoney: function(amount) {\r\n            updateBalance(amount);\r\n        },\r\n        removeMoney: function(amount) {\r\n            updateBalance(-amount);\r\n        },\r\n        getBalance: function() {\r\n            return balance;\r\n        }\r\n    }\r\n}\r\n\r\nlet account1 = createBankAccount();\r\nlet account2 = createBankAccount();\r\n\r\naccount1.addMoney(100); \/\/Account 1 has $100\r\naccount2.addMoney(200); \/\/Account 2 has $200\r\naccount1.removeMoney(10); \/\/Account 1 has $90\r\naccount2.removeMoney(500); \/\/Throws an error\r\n```\r\n\r\nIn this example, functions addMoney, removeMoney, and getBalance are able to access the scope just outside their function and keep a reference to it through its own closure.  Very cool!",
    "image": "closure.jpg"
}